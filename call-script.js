import { 
    makeDraggable,
    styleSelect,
    styleLabel,
    stylePopup,
    stylePopupHeader,
    stylePopupTitle,
    stylePopupCloseBtn,
    styleFloatingButton
} from 'utils';

// Envolve todo o mÃ³dulo em uma funÃ§Ã£o exportada
export function initCallScriptAssistant() {
    const CURRENT_VERSION = "v1.1";
    
    // --- Dados e Estado (MÃ³dulo 2) ---
    const csaChecklistData = {
        "PT BAU": {
            color: "#6c1199",
            inicio: ["ApresentaÃ§Ã£o (Nome e Time)", "A ligaÃ§Ã£o poderÃ¡ ser gravada para fins de treinamento e qualidade de acordo com nossa polÃ­tica de privacidade.", "Informar site registrado no caso", "Confirmar os 10 dÃ­gitos do CID e e-mail do anunciante.", "Confirmar a task e o AM", "Informar tempo da ligaÃ§Ã£o", "Confirmar backup e acessos admin", "Fechar conteÃºdo sensÃ­vel", ],
            fim: ["Resumo da chamada.", "Ajuda Adicional.", "Fechar compartilhamento de tela.", "PrÃ³ximos passos (quanto tempo irÃ¡ acompanhar o caso).", "Pesquisa de SatisfaÃ§Ã£o.", "Durante esse tempo, nossa equipede qualidade poderÃ¡ realizar um teste de conversÃ£o para validar a implementaÃ§Ã£o. VocÃª concorda com esse teste para garantirmos a efetividade da implementaÃ§Ã£o?"]
        },
        "PT LT": {
            color: "#004f67",
            inicio: ["ApresentaÃ§Ã£o (Nome e Time)", "Tempo de ligaÃ§Ã£o", "Informar o site fornecido pelo AM", "Confirmar os 10 dÃ­gitos do CID e e-mail do anunciante.", "Confirmar a Task e o AM", "Termos e condiÃ§Ãµes.", "Confirmar acessos Admin e Backup", "Fechar conteÃºdo sensÃ­vel"],
            fim: ["Resumo da chamada", "Ajuda adicional", "Fechar compartilhamento de tela","PrÃ³ximos passos (quanto tempo irÃ¡ acompanhar)", "Pesquisa de satisfaÃ§Ã£o", "Durante esse tempo, nossa equipe de qualidade poderÃ¡ realizar um teste de conversÃ£o para validar a implementaÃ§Ã£o. VocÃª concorda com esse teste para garantirmos a efetividade da implemetaÃ§Ã£o?"]
        },
        "ES BAU": {
            color: "#00bbff",
            inicio: ["IntroducciÃ³n (Nombre y  Equipo).", "La llamada pode ser grabada con fines de entrenamiento y calidad de acuerdo con nuestra polÃ­tica de privacidad.", "Informar sitio web registrado en el caso.", "ConfirmaciÃ³n: Solicitar al Anunciante que confirme los 10 dÃ­gitos del CID el email del anunciante.", "Confirmaciones: Tarea, AM", "Informar el tiempo que va a durar la reuniÃ³n.", "ConfirmaciÃ³n: Copia de seguridad y acceso de ADM", "Cerrar conteÃºdo sensÃ­vel antes de compartir la pantalla.", ],
            fim: ["Resumen de la llamada.", "Ayuda adicional.", "Cerrar la pantalla compartida.", "PrÃ³ximos passos (Â¿CuÃ¡nto tempo seguirÃ¡ el caso?)", "Encuesta de satisfacciÃ³n.", "EstarÃ© monitoreando su caso durante XX dÃ­as para asegurarme de que todo estÃ© funcionando correctamente. Durante este tiempo, nuestro equipo de qualidade podrÃ­a realizar una prueba de conversiÃ³n para validar la implementaciÃ³n. Â¿EstÃ¡s de acuerdo con esta prueba para garantizar la efectividad de la implementaciÃ³n? Perfecto, Â¡gracias!", ]
        },
        "ES LT": {
            color: "#f269ff",
            inicio: ["PresentaciÃ³n (Nombre y equipo).", "Informar al cliente sobre la llamada grabada.", "Tiempo de duraciÃ³n de la llamada.", "Solicitar al anunciante que confirme lo siguiente: \n A) 10 dÃ­gitos de la cuenta \n B) Correo electrÃ³nico \n C) NÃºmero de telÃ©fono y \n D) Nombre del sitio web.", "autenticar la cuenta del anunciante en el cases, si corresponde.", "TÃ©rminos y condiciones.", "Informar las Task solicitadas y AM.", "Cerrar contenido sensible.", "ConfirmaciÃ³n de copia de seguridad y acceso de administrador a las ferramentas.", "Resumen de llamada."],
            fim: ["Ofrecer ayuda adicional.", "Dejar de compartir la pantalla.", "Pasos siguientes  (Si se le harÃ¡ seguimiento al caso).", "Encuesta de SatisfacciÃ³n.", "Informar al cliente que el equipo de QA irÃ¡ a realizar pruebas en los siguientes dias."]
        },
        "EN BAU": {
            color: "#ff0011",
            inicio: ["Example 1", "Example 2"],
            fim: ["Example 3", "Example 4"]
        }
    };
    const csaCompletedTasks = {};
    let csaCurrentLang = "PT";
    let csaCurrentType = "BAU";

      const btn = document.createElement("button");
    btn.id = "call-script-floating-btn";
    btn.textContent = "ðŸ“ž";
    Object.assign(btn.style, styleFloatingButton, { top: "68%" }); // PosiÃ§Ã£o abaixo do Notes
    btn.onmouseenter = () => (btn.style.background = "#1765c0");
    btn.onmouseleave = () => (btn.style.background = "#1a73e8");
    document.body.appendChild(btn);
    makeDraggable(btn);

    const popup = document.createElement("div");
    popup.id = "call-script-popup";
    Object.assign(popup.style, stylePopup, { right: "24px" }); // PosiÃ§Ã£o igual ao Notes

    const header = document.createElement("div");
    Object.assign(header.style, stylePopupHeader);
    const logo = document.createElement("img");
    logo.src = "https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg";
    Object.assign(logo.style, { width: "24px", height: "24px" });
    const titleContainer = document.createElement("div"); // Container para tÃ­tulo e versÃ£o
    Object.assign(titleContainer.style, { display: 'flex', flexDirection: 'column', flexGrow: '1' });

    const title = document.createElement("div");
    title.textContent = "Call Script Assistant"; // TÃ­tulo sem a versÃ£o
    Object.assign(title.style, stylePopupTitle);
    titleContainer.appendChild(title);

    const versionDisplay = document.createElement("div"); // Elemento da versÃ£o
    versionDisplay.textContent = CURRENT_VERSION;
    Object.assign(versionDisplay.style, stylePopupVersion);
    titleContainer.appendChild(versionDisplay);

    header.appendChild(logo);
    header.appendChild(titleContainer); // Adiciona o container de tÃ­tulo/versÃ£o
    popup.appendChild(header);
    makeDraggable(popup, header);

    const closeBtn = document.createElement("div");
    closeBtn.textContent = "âœ•";
    Object.assign(closeBtn.style, stylePopupCloseBtn);
    closeBtn.onclick = () => togglePopup(false);
    popup.appendChild(closeBtn);

    // ConteÃºdo principal do popup
    const popupContent = document.createElement("div");
    Object.assign(popupContent.style, {
        padding: "0 16px 16px 16px", // Ajuste para o padding lateral e inferior
        overflowY: "auto", // Scroll para o conteÃºdo
        flexGrow: "1" // Permite que o conteÃºdo ocupe o espaÃ§o restante
    });
    popup.appendChild(popupContent); // Todos os elementos vÃ£o para popupContent

    // Adiciona o crÃ©dito no final do popup
    const credit = document.createElement("div");
    credit.textContent = "created by lucaste@";
    Object.assign(credit.style, styleCredit);
    popup.appendChild(credit); // Adiciona o crÃ©dito diretamente ao popup, abaixo do conteÃºdo

    // ... (o restante do seu cÃ³digo da UI e LÃ³gica, garantindo que os elementos sejam filhos de `popupContent` )
    // Exemplo:
    const accountIdLabel = document.createElement("label");
    Object.assign(accountIdLabel.style, styleLabel);
    accountIdLabel.textContent = "Account ID:";
    // ... e assim por diante
    popupContent.appendChild(accountIdLabel); // MudanÃ§a aqui!

    // ... (todos os outros elementos devem ser appendChildren de popupContent)

    // BotÃµes
    const buttonContainer = document.createElement("div");
    Object.assign(buttonContainer.style, { display: "flex", gap: "8px", padding: "0 0 16px 0" });
    popupContent.appendChild(buttonContainer); // MudanÃ§a aqui!

    const clearButton = document.createElement("button");
    clearButton.textContent = "Limpar Tudo";
    Object.assign(clearButton.style, { ...styleButtonBase, backgroundColor: "#e0e0e0", color: "#3c4043" });
    clearButton.onmouseover = () => (clearButton.style.backgroundColor = "#dadce0");
    clearButton.onmouseout = () => (clearButton.style.backgroundColor = "#e0e0e0");
    clearButton.onclick = clearAllFields;
    buttonContainer.appendChild(clearButton);

    const copyAllButton = document.createElement("button");
    copyAllButton.textContent = "Copiar Tudo";
    Object.assign(copyAllButton.style, { ...styleButtonBase, backgroundColor: "#1a73e8" });
    copyAllButton.onmouseover = () => (copyAllButton.style.backgroundColor = "#1765c0");
    copyAllButton.onmouseout = () => (copyAllButton.style.backgroundColor = "#1a73e8");
    copyAllButton.onclick = copyAllToClipboard;
    buttonContainer.appendChild(copyAllButton);

    
    // --- LÃ³gica (MÃ³dulo 2) ---

    function hexToRgba(hex, alpha) {
        const clean = hex.replace("#","");
        const r = parseInt(clean.substring(0,2),16);
        const g = parseInt(clean.substring(2,4),16);
        const b = parseInt(clean.substring(4,6),16);
        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    }

    function csaTogglePopup(show) {
        if (show) {
            csaPopup.style.opacity = "1";
            csaPopup.style.pointerEvents = "auto";
            csaPopup.style.transform = "scale(1)";
        } else {
            csaPopup.style.opacity = "0";
            csaPopup.style.pointerEvents = "none";
            csaPopup.style.transform = "scale(0.95)";
        }
    }

    function csaSetLiStyle(li, isCompleted, color) {
        li.classList.toggle('csa-completed', isCompleted);

        if (isCompleted) {
            li.style.borderColor = color;
            li.style.backgroundColor = hexToRgba(color, 0.1);
        } else {
            li.style.borderColor = 'transparent';
            li.style.backgroundColor = '#f8f9fa';
        }
    }

    function checkGroupCompletion(combinedKey, groupKey, groupDiv) {
        const data = csaChecklistData[combinedKey];
        if (!data) return;

        const items = data[groupKey];
        if (!items || items.length === 0) return;

        let allDone = true;
        for (let i = 0; i < items.length; i++) {
            const key = `${combinedKey}-${groupKey}-${i}`;
            if (!csaCompletedTasks[key]) {
                allDone = false;
                break;
            }
        }
        groupDiv.classList.toggle('csa-group-completed', allDone);
    }

    function csaBuildChecklist() {
        csaChecklistArea.innerHTML = "";
        const combinedKey = `${csaCurrentLang} ${csaCurrentType}`;
        const data = csaChecklistData[combinedKey];

        if (!data) {
            csaChecklistArea.innerHTML = `<div style="padding: 10px; color: #5f6368; font-family: 'Poppins', sans-serif;">Script nÃ£o disponÃ­vel para esta combinaÃ§Ã£o.</div>`;
            return;
        }

        const color = data.color;

        ['inicio', 'fim'].forEach(groupKey => {
            const items = data[groupKey];
            if (!items || items.length === 0) return;

            const groupDiv = document.createElement('div');
            groupDiv.className = 'csa-group-container';
            Object.assign(groupDiv.style, { marginBottom: '16px' });

            const groupTitle = document.createElement('div');
            groupTitle.className = 'csa-group-title';
            let titleText = groupKey === 'inicio' ? 'InÃ­cio' : 'Fim';
            if (csaCurrentLang.includes("ES")) titleText = groupKey === 'inicio' ? 'Inicio' : 'Fin';
            if (csaCurrentLang.includes("EN")) titleText = groupKey === 'inicio' ? 'Start' : 'End';

            groupTitle.textContent = titleText;
            Object.assign(groupTitle.style, styleLabel, { // styleLabel Ã© importado
                fontWeight: "600",
                fontSize: "14px",
                textDecoration: "underline",
                marginBottom: "8px"
            });
            groupDiv.appendChild(groupTitle);

            const list = document.createElement("ul");
            Object.assign(list.style, { listStyle: 'none', paddingLeft: '0', margin: '0' });

            items.forEach((item, index) => {
                const li = document.createElement("li");
                li.className = 'csa-li';
                li.textContent = item;

                const key = `${combinedKey}-${groupKey}-${index}`;
                const done = !!csaCompletedTasks[key];

                csaSetLiStyle(li, done, color);

                li.addEventListener("click", () => {
                    const newDone = !csaCompletedTasks[key];
                    csaCompletedTasks[key] = newDone;
                    csaSetLiStyle(li, newDone, color);
                    checkGroupCompletion(combinedKey, groupKey, groupDiv);
                });
                list.appendChild(li);
            });
            groupDiv.appendChild(list);
            csaChecklistArea.appendChild(groupDiv);

            checkGroupCompletion(combinedKey, groupKey, groupDiv);
        });
    }

    // --- Event Handlers (MÃ³dulo 2) ---
    let csaVisible = false;
    csaBtn.onclick = () => {
        csaVisible = !csaVisible;
        csaTogglePopup(csaVisible);
    };

    function setActiveType(type) {
         csaCurrentType = type;
         csaTypeBAU.style.background = (type === 'BAU') ? '#e8f0fe' : '#f8f9fa';
         csaTypeBAU.style.color = (type === 'BAU') ? '#1967d2' : '#5f6368';
         csaTypeLT.style.background = (type === 'LT') ? '#e8f0fe' : '#f8f9fa';
         csaTypeLT.style.color = (type === 'LT') ? '#1967d2' : '#5f6368';
         csaBuildChecklist();
    }

    csaTypeBAU.onclick = () => setActiveType('BAU');
    csaTypeLT.onclick = () => setActiveType('LT');

    csaLangSelect.addEventListener("change", (e) => {
        csaCurrentLang = e.target.value;
        csaBuildChecklist();
    });

    // Carregamento inicial
    setActiveType(csaCurrentType);

} // Fim do initCallScriptAssistant()

// call-script.js

import {
    makeDraggable,
    styleSelect,
    styleLabel,
    stylePopup,
    stylePopupHeader,
    stylePopupTitle,
    stylePopupCloseBtn,
    styleFloatingButton,
    stylePopupVersion, // NOVO: Estilo para a versÃ£o
    styleCredit        // NOVO: Estilo para o crÃ©dito
} from 'utils';

export function initCallScriptAssistant() {
    const CURRENT_VERSION = "v1.1"; // Atualize sua versÃ£o aqui!

    // ... (funÃ§Ãµes helper mantidas)

  
    // ... (LÃ³gica de togglePopup)

    function togglePopup(show) {
        if (show) {
            popup.style.opacity = "1";
            popup.style.pointerEvents = "auto";
            popup.style.transform = "scale(1)";
        } else {
            popup.style.opacity = "0";
            popup.style.pointerEvents = "none";
            popup.style.transform = "scale(0.95)";
        }
    }

    let visible = false;
    btn.onclick = () => {
        visible = !visible;
        togglePopup(visible);
    };
}